"""
setup.py
"""
from setuptools import setup, find_packages
from setuptools.extension import Extension
from Redy.Tools.Version import Version
from Redy.Tools.PathLib import Path
from os.path import relpath
import os.path
from functools import reduce

# workaround: os.path.realpath does not follow symlinks on Windows
# wrapping paths with r guarantees relpath to have paths on the same drive.

def r(p):
    if isinstance(p, str):
        p = Path(p)

    search_path = p
    relatives = []
    while search_path.parent() != search_path:

        maybe_link_root = str(search_path)
        if os.path.islink(maybe_link_root):
            return str(reduce(lambda current, sub: current.into(sub), reversed(relatives), Path(os.readlink(maybe_link_root))))
        search_path = search_path.parent()
        relatives.append(search_path.relative())

    return str(p)


version_filename = r('${CMAKE_CURRENT_SOURCE_DIR}/next_version')
build_dir = r('${CMAKE_CURRENT_BINARY_DIR}')
print(build_dir)
src_dir   = relpath(r('${CMAKE_CURRENT_SOURCE_DIR}'), build_dir)
lib_dir   = relpath(r('${TRINITY_OUTPUT_DIR}'), build_dir)
swigcxx   = relpath(r('${swigcxx}'), build_dir)
typesys   = relpath(r('${typesys}'), build_dir)
inc_ffi   = relpath(r('${TRINITY_FFI_NATIVE_DIR}'), build_dir)
inc_tri   = relpath(r('${TRINITY_C_INCLUDE_DIR}'), build_dir)
inc_jit   = relpath(r('${GRAPHENGINE_JIT_NATIVE_DIR}'), build_dir)
whl_dir   = relpath('dist', build_dir)
dep_path  = relpath(str(Path(src_dir, "GraphEngine", "DotNet", "Dependencies.csproj")), build_dir)

with open(version_filename) as f:
    version = Version(f.read().strip())

try:
    with open('${CMAKE_CURRENT_SOURCE_DIR}/README.rst', encoding='utf-8') as f:
        readme = f.read()
except FileNotFoundError:
    readme = ''

ge_module = Extension('_ffi',
                      sources=[swigcxx, typesys],
                      include_dirs=[inc_ffi, inc_tri, inc_jit ],
                      libraries=['trinity_ffi', 'Trinity', 'GraphEngine.Jit.Native'],
                      library_dirs=[lib_dir],
                      extra_compile_args=${ext_cxx_flags},
                      extra_link_args=${ext_linker_flags})

setup(name='GraphEngine',
      version=str(version),
      keywords='distributed, storage, cloud memory, graph computing',
      description='Trinity GraphEngine Engine interoperatibility',
      long_description=readme,
      license='MIT',
      url='https://github.com/Microsoft/GraphEngine',
      author='Microsoft GraphEngine Team',
      author_email='graph@microsoft.com',
      include_package_data=True,
      install_requires=['toolz', 'Redy>=0.1.30', 'linq-t'],
      package_dir={ '' : src_dir},
      packages=['GraphEngine', 'GraphEngine.tsl', 'GraphEngine.tsl.type', 'GraphEngine.DotNet'],
      data_files=[('GraphEngine/DotNet', [dep_path])],
      ext_package='GraphEngine',
      ext_modules=[ge_module],
      # encoding='gbk',
      # entry_points={
      #    'console_scripts': [
      #        'tsl-codegen=GraphEngine.Command:code_gen',
      #        'tsl-metagen=GraphEngine.Command:meta_gen']
      # },
      platforms='any',
      classifiers=[
          'Programming Language :: Python :: 2.7',
          'Programming Language :: Python :: 3.4',
          'Programming Language :: Python :: 3.5',
          'Programming Language :: Python :: 3.6',
          'Programming Language :: Python :: 3.7',
          'Programming Language :: Python :: Implementation :: CPython'],
      zip_safe=False)
lib_dir_path = Path(lib_dir)
for each in Path(whl_dir).list_dir(lambda path: 
            os.path.split(path)[-1].startswith(f"GraphEngine-{str(version)}") 
            and 
            path.endswith('.whl')):
    with open(str(lib_dir_path.into(each.relative())), 'wb') as w, open(str(each), 'rb') as r:
        w.write(r.read())
    

version.increment(version_number_idx=2, increment=1)
if version[2] is 42:
    version.increment(version_number_idx=1, increment=1)
if version[1] is 42:
    version.increment(version_number_idx=0, increment=1)

with open(version_filename, 'w') as f:
    f.write(str(version))

